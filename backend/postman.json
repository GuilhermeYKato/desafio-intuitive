{
	"info": {
		"_postman_id": "051f3e75-1704-4f7d-894d-5fe88452512f",
		"name": "New Collection Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43312290"
	},
	"item": [
		{
			"name": "/search?q=Unimed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.to.have.status(200));",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    const requiredFields = [",
							"        \"Registro_ANS\", \"CNPJ\", \"Razao_Social\", \"Nome_Fantasia\", \"Modalidade\",",
							"        \"Logradouro\", \"Numero\", \"Complemento\", \"Bairro\", \"Cidade\", \"UF\", \"CEP\",",
							"        \"DDD\", \"Telefone\", \"Fax\", \"Endereco_eletronico\", \"Representante\",",
							"        \"Cargo_Representante\", \"Regiao_de_Comercializacao\", \"Data_Registro_ANS\"",
							"    ];",
							"",
							"    responseData.forEach(item => {",
							"        requiredFields.forEach(field => {",
							"            pm.expect(item).to.have.property(field);",
							"        });",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify the response content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Telefone and Fax are in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.Telefone).to.be.a('string').and.match(/^\\d{2}-\\d{4,5}-\\d{4}$/);",
							"        pm.expect(item.Fax).to.be.a('string').and.match(/^\\d{2}-\\d{4,5}-\\d{4}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"CEP property must exist in the response\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.CEP).to.exist;",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/search?q=Unimed",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "Unimed"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/search?q=Bradesco",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"  ",
							"  const requiredFields = [",
							"    \"Registro_ANS\", \"CNPJ\", \"Razao_Social\", \"Nome_Fantasia\", \"Modalidade\",",
							"    \"Logradouro\", \"Numero\", \"Complemento\", \"Bairro\", \"Cidade\", \"UF\", \"CEP\",",
							"    \"DDD\", \"Telefone\", \"Fax\", \"Endereco_eletronico\", \"Representante\",",
							"    \"Cargo_Representante\", \"Regiao_de_Comercializacao\", \"Data_Registro_ANS\"",
							"  ];",
							"",
							"  responseData.forEach(function(item) {",
							"    requiredFields.forEach(function(field) {",
							"      pm.expect(item).to.have.property(field);",
							"    });",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(item) {",
							"    pm.expect(item.Endereco_eletronico).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
							"  });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/search?q=Bradesco",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "Bradesco"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/search?q=Sul America",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Content type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response body is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Each element in the array has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    responseData.forEach(function (element) {",
							"        pm.expect(element).to.include.all.keys(",
							"            \"Registro_ANS\", \"CNPJ\", \"Razao_Social\", \"Nome_Fantasia\", \"Modalidade\",",
							"            \"Logradouro\", \"Numero\", \"Complemento\", \"Bairro\", \"Cidade\", \"UF\",",
							"            \"CEP\", \"DDD\", \"Telefone\", \"Fax\", \"Endereco_eletronico\",",
							"            \"Representante\", \"Cargo_Representante\", \"Regiao_de_Comercializacao\",",
							"            \"Data_Registro_ANS\"",
							"        );",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify the structure of the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.be.an('object');",
							"        pm.expect(item).to.have.property('Registro_ANS');",
							"        pm.expect(item).to.have.property('CNPJ');",
							"        pm.expect(item).to.have.property('Razao_Social');",
							"        pm.expect(item).to.have.property('Nome_Fantasia');",
							"        pm.expect(item).to.have.property('Modalidade');",
							"        pm.expect(item).to.have.property('Logradouro');",
							"        pm.expect(item).to.have.property('Numero');",
							"        pm.expect(item).to.have.property('Complemento');",
							"        pm.expect(item).to.have.property('Bairro');",
							"        pm.expect(item).to.have.property('Cidade');",
							"        pm.expect(item).to.have.property('UF');",
							"        pm.expect(item).to.have.property('CEP');",
							"        pm.expect(item).to.have.property('DDD');",
							"        pm.expect(item).to.have.property('Telefone');",
							"        pm.expect(item).to.have.property('Fax');",
							"        pm.expect(item).to.have.property('Endereco_eletronico');",
							"        pm.expect(item).to.have.property('Representante');",
							"        pm.expect(item).to.have.property('Cargo_Representante');",
							"        pm.expect(item).to.have.property('Regiao_de_Comercializacao');",
							"        pm.expect(item).to.have.property('Data_Registro_ANS');",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/search?q=Sul America",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"search"
					],
					"query": [
						{
							"key": "q",
							"value": "Sul America"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/search_by_city?city=Rio de Janeiro",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the content type of application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the first element in the array has all the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    const requiredFields = [\"Registro_ANS\", \"CNPJ\", \"Razao_Social\", \"Nome_Fantasia\", \"Modalidade\", \"Logradouro\", \"Numero\", \"Complemento\", \"Bairro\", \"Cidade\", \"UF\", \"CEP\", \"DDD\", \"Telefone\", \"Fax\", \"Endereco_eletronico\", \"Representante\", \"Cargo_Representante\", \"Regiao_de_Comercializacao\", \"Data_Registro_ANS\"];",
							"",
							"    pm.expect(responseData[0]).to.include.all.keys(requiredFields);",
							"});",
							"",
							"",
							"pm.test(\"Cidade field should be equal\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.Cidade).to.equal(\"Rio de Janeiro\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/search_by_city?city=Rio de Janeiro",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"search_by_city"
					],
					"query": [
						{
							"key": "city",
							"value": "Rio de Janeiro"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/search_by_city?city=São Paulo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item).to.have.property('Registro_ANS');",
							"        pm.expect(item).to.have.property('CNPJ');",
							"        pm.expect(item).to.have.property('Razao_Social');",
							"        pm.expect(item).to.have.property('Nome_Fantasia');",
							"        pm.expect(item).to.have.property('Modalidade');",
							"        pm.expect(item).to.have.property('Logradouro');",
							"        pm.expect(item).to.have.property('Numero');",
							"        pm.expect(item).to.have.property('Complemento');",
							"        pm.expect(item).to.have.property('Bairro');",
							"        pm.expect(item).to.have.property('Cidade');",
							"        pm.expect(item).to.have.property('UF');",
							"        pm.expect(item).to.have.property('CEP');",
							"        pm.expect(item).to.have.property('DDD');",
							"        pm.expect(item).to.have.property('Telefone');",
							"        pm.expect(item).to.have.property('Fax');",
							"        pm.expect(item).to.have.property('Endereco_eletronico');",
							"        pm.expect(item).to.have.property('Representante');",
							"        pm.expect(item).to.have.property('Cargo_Representante');",
							"        pm.expect(item).to.have.property('Regiao_de_Comercializacao');",
							"        pm.expect(item).to.have.property('Data_Registro_ANS');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"CEP is in a valid format\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  responseData.forEach(function(data) {",
							"    pm.expect(data.CEP).to.match(/^\\d{5}-\\d{3}$/);",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Cidade should be 'São Paulo'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.Cidade).to.equal(\"São Paulo\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"UF is a valid Brazilian state abbreviation\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.UF).to.match(/^(AC|AL|AP|AM|BA|CE|DF|ES|GO|MA|MT|MS|MG|PA|PB|PR|PE|PI|RJ|RN|RS|RO|RR|SC|SP|SE|TO)$/);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/search_by_city?city=São Paulo",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"search_by_city"
					],
					"query": [
						{
							"key": "city",
							"value": "São Paulo"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/search_by_registro_ans List of ANS",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"",
							"    const requiredFields = [",
							"        \"Registro_ANS\", \"CNPJ\", \"Razao_Social\", \"Nome_Fantasia\", ",
							"        \"Modalidade\", \"Logradouro\", \"Numero\", \"Complemento\", ",
							"        \"Bairro\", \"Cidade\", \"UF\", \"CEP\", \"DDD\", \"Telefone\", ",
							"        \"Fax\", \"Endereco_eletronico\", \"Representante\", ",
							"        \"Cargo_Representante\", \"Regiao_de_Comercializacao\", ",
							"        \"Data_Registro_ANS\"",
							"    ];",
							"",
							"    requiredFields.forEach(field => {",
							"        pm.expect(responseData[0]).to.have.property(field);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response is in JSON format\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Fields like CNPJ, CEP, DDD, and Telefone exist in the response\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(item => {",
							"        pm.expect(item.CNPJ).to.exist;",
							"        pm.expect(item.CEP).to.exist;",
							"        pm.expect(item.DDD).to.exist;",
							"        pm.expect(item.Telefone).to.exist;",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"registro_ans\": [\"419761\",\"421545\", \"422908\", \"421553\" ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/search_by_registro_ans",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"search_by_registro_ans"
					]
				}
			},
			"response": []
		},
		{
			"name": "/search_by_registro_ans Only One",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    const requiredFields = [",
							"        \"Registro_ANS\", \"CNPJ\", \"Razao_Social\", \"Nome_Fantasia\", \"Modalidade\",",
							"        \"Logradouro\", \"Numero\", \"Complemento\", \"Bairro\", \"Cidade\",",
							"        \"UF\", \"CEP\", \"DDD\", \"Telefone\", \"Fax\", \"Endereco_eletronico\",",
							"        \"Representante\", \"Cargo_Representante\", \"Regiao_de_Comercializacao\",",
							"        \"Data_Registro_ANS\"",
							"    ];",
							"    ",
							"    requiredFields.forEach(function(field) {",
							"        pm.expect(responseData[0]).to.have.property(field);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response is an array with at least one element\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"});",
							"",
							"",
							"pm.test(\"Data_Registro_ANS is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    responseData.forEach(function(item) {",
							"        pm.expect(item.Data_Registro_ANS).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"registro_ans\": [\"419761\" ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/search_by_registro_ans",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"search_by_registro_ans"
					]
				}
			},
			"response": []
		},
		{
			"name": "/search_by_registro_ans Não Encontrado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'detail'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.detail).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Detail is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.not.be.empty;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"registro_ans\": [\"111111\" ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/search_by_registro_ans",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"search_by_registro_ans"
					]
				}
			},
			"response": []
		}
	]
}